--- ./xv6/makefile	2017-11-07 21:24:44.000000000 -0600
+++ ./xv6-public/makefile	2017-11-07 21:30:40.000000000 -0600
@@ -174,6 +174,8 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_mallocAndFree\
+	_testuv2p\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -243,6 +245,8 @@
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
+	mallocAndFree.c\
+	testuv2p.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
--- ./xv6/usys.S	2017-11-07 21:24:45.000000000 -0600
+++ ./xv6-public/usys.S	2017-11-05 12:45:27.000000000 -0600
@@ -29,3 +29,4 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(uv2p)
--- ./xv6/user.h	2017-11-07 21:24:45.000000000 -0600
+++ ./xv6-public/user.h	2017-11-07 17:47:42.000000000 -0600
@@ -23,6 +23,7 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int uv2p(char *);
 
 // ulib.c
 int stat(char*, struct stat*);
--- ./xv6/defs.h	2017-11-07 21:24:44.000000000 -0600
+++ ./xv6-public/defs.h	2017-11-07 17:41:04.000000000 -0600
@@ -185,6 +185,6 @@
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
-
+int 		uv2p();
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
--- ./xv6/syscall.c	2017-11-07 21:24:45.000000000 -0600
+++ ./xv6-public/syscall.c	2017-11-05 12:51:28.000000000 -0600
@@ -103,6 +103,7 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_uv2p(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +127,7 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_uv2p]    sys_uv2p,
 };
 
 void
--- ./xv6/sysproc.c	2017-11-07 21:24:45.000000000 -0600
+++ ./xv6-public/sysproc.c	2017-11-07 17:42:49.000000000 -0600
@@ -89,3 +89,9 @@
   release(&tickslock);
   return xticks;
 }
+
+int sys_uv2p(void)
+{
+
+return  uv2p();
+}
--- ./xv6/vm.c	2017-11-07 21:24:45.000000000 -0600
+++ ./xv6-public/vm.c	2017-11-07 18:27:29.000000000 -0600
@@ -32,6 +32,8 @@
 // Return the address of the PTE in page table pgdir
 // that corresponds to virtual address va.  If alloc!=0,
 // create any required page table pages.
+
+
 static pte_t *
 walkpgdir(pde_t *pgdir, const void *va, int alloc)
 {
@@ -78,6 +80,28 @@
   }
   return 0;
 }
+int uv2p()
+{
+char * va;
+uint pa;
+ pte_t *pte;
+ struct proc *curproc = myproc();
+
+if (argptr(0, &va, 4) < 0)
+	return -1;
+
+//cprintf("user parameter %x  ",va);
+    pte=walkpgdir(curproc->pgdir, va, 0);
+//cprintf("pte address %x  *pte value %x",pte,(*pte));
+  if((*pte & PTE_P) == 0)
+    return -1;
+pa=PTE_ADDR(*pte) | ((uint)va & 0xFFF);
+
+cprintf("physical address is: %x",pa);
+return 0;
+ 
+
+}
 
 // There is one page table per process, plus one that's used when
 // a CPU is not running any process (kpgdir). The kernel uses the
